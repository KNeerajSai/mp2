{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'https://pokeapi.co/api/v2';\nconst api = axios.create({\n  baseURL: BASE_URL,\n  timeout: 10000\n});\nexport const pokemonApi = {\n  // Get list of Pokemon with pagination\n  async getPokemonList(limit = 150, offset = 0) {\n    try {\n      const response = await api.get(`/pokemon?limit=${limit}&offset=${offset}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Pokemon list:', error);\n      throw error;\n    }\n  },\n  // Get detailed Pokemon data by name or ID\n  async getPokemon(nameOrId) {\n    try {\n      const response = await api.get(`/pokemon/${nameOrId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching Pokemon ${nameOrId}:`, error);\n      throw error;\n    }\n  },\n  // Get Pokemon species data for additional info\n  async getPokemonSpecies(nameOrId) {\n    try {\n      const response = await api.get(`/pokemon-species/${nameOrId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching Pokemon species ${nameOrId}:`, error);\n      throw error;\n    }\n  },\n  // Get Pokemon by type\n  async getPokemonByType(type) {\n    try {\n      const response = await api.get(`/type/${type}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching Pokemon by type ${type}:`, error);\n      throw error;\n    }\n  },\n  // Get all Pokemon types\n  async getAllTypes() {\n    try {\n      const response = await api.get('/type');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Pokemon types:', error);\n      throw error;\n    }\n  },\n  // Extract Pokemon ID from URL\n  extractIdFromUrl(url) {\n    const parts = url.split('/');\n    return parseInt(parts[parts.length - 2], 10);\n  },\n  // Get Pokemon image URL\n  getPokemonImageUrl(id) {\n    return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;\n  }\n};\nexport default pokemonApi;","map":{"version":3,"names":["axios","BASE_URL","api","create","baseURL","timeout","pokemonApi","getPokemonList","limit","offset","response","get","data","error","console","getPokemon","nameOrId","getPokemonSpecies","getPokemonByType","type","getAllTypes","extractIdFromUrl","url","parts","split","parseInt","length","getPokemonImageUrl","id"],"sources":["/Users/deepthikondaveeti/Documents/Repos/CHI/mp2/src/services/pokemonApi.ts"],"sourcesContent":["import axios from 'axios';\nimport { Pokemon, PokemonListResponse, PokemonSpecies } from '../types/pokemon';\n\nconst BASE_URL = 'https://pokeapi.co/api/v2';\n\nconst api = axios.create({\n  baseURL: BASE_URL,\n  timeout: 10000,\n});\n\nexport const pokemonApi = {\n  // Get list of Pokemon with pagination\n  async getPokemonList(limit: number = 150, offset: number = 0): Promise<PokemonListResponse> {\n    try {\n      const response = await api.get(`/pokemon?limit=${limit}&offset=${offset}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Pokemon list:', error);\n      throw error;\n    }\n  },\n\n  // Get detailed Pokemon data by name or ID\n  async getPokemon(nameOrId: string | number): Promise<Pokemon> {\n    try {\n      const response = await api.get(`/pokemon/${nameOrId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching Pokemon ${nameOrId}:`, error);\n      throw error;\n    }\n  },\n\n  // Get Pokemon species data for additional info\n  async getPokemonSpecies(nameOrId: string | number): Promise<PokemonSpecies> {\n    try {\n      const response = await api.get(`/pokemon-species/${nameOrId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching Pokemon species ${nameOrId}:`, error);\n      throw error;\n    }\n  },\n\n  // Get Pokemon by type\n  async getPokemonByType(type: string): Promise<any> {\n    try {\n      const response = await api.get(`/type/${type}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching Pokemon by type ${type}:`, error);\n      throw error;\n    }\n  },\n\n  // Get all Pokemon types\n  async getAllTypes(): Promise<any> {\n    try {\n      const response = await api.get('/type');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Pokemon types:', error);\n      throw error;\n    }\n  },\n\n  // Extract Pokemon ID from URL\n  extractIdFromUrl(url: string): number {\n    const parts = url.split('/');\n    return parseInt(parts[parts.length - 2], 10);\n  },\n\n  // Get Pokemon image URL\n  getPokemonImageUrl(id: number): string {\n    return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;\n  },\n};\n\nexport default pokemonApi;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,QAAQ,GAAG,2BAA2B;AAE5C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAG;EACxB;EACA,MAAMC,cAAcA,CAACC,KAAa,GAAG,GAAG,EAAEC,MAAc,GAAG,CAAC,EAAgC;IAC1F,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,kBAAkBH,KAAK,WAAWC,MAAM,EAAE,CAAC;MAC1E,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAME,UAAUA,CAACC,QAAyB,EAAoB;IAC5D,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,YAAYK,QAAQ,EAAE,CAAC;MACtD,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0BG,QAAQ,GAAG,EAAEH,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMI,iBAAiBA,CAACD,QAAyB,EAA2B;IAC1E,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,oBAAoBK,QAAQ,EAAE,CAAC;MAC9D,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkCG,QAAQ,GAAG,EAAEH,KAAK,CAAC;MACnE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMK,gBAAgBA,CAACC,IAAY,EAAgB;IACjD,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,SAASQ,IAAI,EAAE,CAAC;MAC/C,OAAOT,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkCM,IAAI,GAAG,EAAEN,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMO,WAAWA,CAAA,EAAiB;IAChC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,OAAO,CAAC;MACvC,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAQ,gBAAgBA,CAACC,GAAW,EAAU;IACpC,MAAMC,KAAK,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;IAC5B,OAAOC,QAAQ,CAACF,KAAK,CAACA,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;EAC9C,CAAC;EAED;EACAC,kBAAkBA,CAACC,EAAU,EAAU;IACrC,OAAO,mGAAmGA,EAAE,MAAM;EACpH;AACF,CAAC;AAED,eAAetB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}