{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { pokemonApi } from '../services/pokemonApi';\nexport const usePokemon = () => {\n  _s();\n  const [pokemonList, setPokemonList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [types, setTypes] = useState([]);\n  useEffect(() => {\n    loadPokemonData();\n    loadTypes();\n  }, []);\n  const loadPokemonData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Get the first 150 Pokemon\n      const listResponse = await pokemonApi.getPokemonList(150, 0);\n\n      // Fetch detailed data for each Pokemon\n      const detailedPokemon = await Promise.all(listResponse.results.map(async pokemon => {\n        const id = pokemonApi.extractIdFromUrl(pokemon.url);\n        return await pokemonApi.getPokemon(id);\n      }));\n      setPokemonList(detailedPokemon);\n    } catch (err) {\n      setError('Failed to load Pokemon data');\n      console.error('Error loading Pokemon:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadTypes = async () => {\n    try {\n      const typesResponse = await pokemonApi.getAllTypes();\n      const typeNames = typesResponse.results.map(type => type.name);\n      setTypes(typeNames);\n    } catch (err) {\n      console.error('Error loading types:', err);\n    }\n  };\n  const searchPokemon = searchTerm => {\n    if (!searchTerm.trim()) return pokemonList;\n    return pokemonList.filter(pokemon => pokemon.name.toLowerCase().includes(searchTerm.toLowerCase()) || pokemon.id.toString().includes(searchTerm) || pokemon.types.some(type => type.type.name.toLowerCase().includes(searchTerm.toLowerCase())));\n  };\n  const sortPokemon = (pokemon, field, order) => {\n    return [...pokemon].sort((a, b) => {\n      let aValue;\n      let bValue;\n      switch (field) {\n        case 'name':\n          aValue = a.name;\n          bValue = b.name;\n          break;\n        case 'id':\n          aValue = a.id;\n          bValue = b.id;\n          break;\n        case 'height':\n          aValue = a.height;\n          bValue = b.height;\n          break;\n        case 'weight':\n          aValue = a.weight;\n          bValue = b.weight;\n          break;\n        case 'base_experience':\n          aValue = a.base_experience;\n          bValue = b.base_experience;\n          break;\n        default:\n          return 0;\n      }\n      if (order === 'asc') {\n        return aValue > bValue ? 1 : -1;\n      } else {\n        return aValue < bValue ? 1 : -1;\n      }\n    });\n  };\n  const filterByType = (pokemon, selectedTypes) => {\n    if (selectedTypes.length === 0) return pokemon;\n    return pokemon.filter(p => p.types.some(type => selectedTypes.includes(type.type.name)));\n  };\n  return {\n    pokemonList,\n    loading,\n    error,\n    types,\n    searchPokemon,\n    sortPokemon,\n    filterByType,\n    refetch: loadPokemonData\n  };\n};\n_s(usePokemon, \"BdWI6ouUxQJ3iowvO+J/OrtdFjE=\");","map":{"version":3,"names":["useState","useEffect","pokemonApi","usePokemon","_s","pokemonList","setPokemonList","loading","setLoading","error","setError","types","setTypes","loadPokemonData","loadTypes","listResponse","getPokemonList","detailedPokemon","Promise","all","results","map","pokemon","id","extractIdFromUrl","url","getPokemon","err","console","typesResponse","getAllTypes","typeNames","type","name","searchPokemon","searchTerm","trim","filter","toLowerCase","includes","toString","some","sortPokemon","field","order","sort","a","b","aValue","bValue","height","weight","base_experience","filterByType","selectedTypes","length","p","refetch"],"sources":["/Users/deepthikondaveeti/Documents/Repos/CHI/mp2/src/hooks/usePokemon.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Pokemon, PokemonListItem, SortField, SortOrder } from '../types/pokemon';\nimport { pokemonApi } from '../services/pokemonApi';\n\nexport const usePokemon = () => {\n  const [pokemonList, setPokemonList] = useState<Pokemon[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [types, setTypes] = useState<string[]>([]);\n\n  useEffect(() => {\n    loadPokemonData();\n    loadTypes();\n  }, []);\n\n  const loadPokemonData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Get the first 150 Pokemon\n      const listResponse = await pokemonApi.getPokemonList(150, 0);\n      \n      // Fetch detailed data for each Pokemon\n      const detailedPokemon = await Promise.all(\n        listResponse.results.map(async (pokemon: PokemonListItem) => {\n          const id = pokemonApi.extractIdFromUrl(pokemon.url);\n          return await pokemonApi.getPokemon(id);\n        })\n      );\n\n      setPokemonList(detailedPokemon);\n    } catch (err) {\n      setError('Failed to load Pokemon data');\n      console.error('Error loading Pokemon:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadTypes = async () => {\n    try {\n      const typesResponse = await pokemonApi.getAllTypes();\n      const typeNames = typesResponse.results.map((type: any) => type.name);\n      setTypes(typeNames);\n    } catch (err) {\n      console.error('Error loading types:', err);\n    }\n  };\n\n  const searchPokemon = (searchTerm: string): Pokemon[] => {\n    if (!searchTerm.trim()) return pokemonList;\n    \n    return pokemonList.filter(pokemon =>\n      pokemon.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      pokemon.id.toString().includes(searchTerm) ||\n      pokemon.types.some(type => \n        type.type.name.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    );\n  };\n\n  const sortPokemon = (pokemon: Pokemon[], field: SortField, order: SortOrder): Pokemon[] => {\n    return [...pokemon].sort((a, b) => {\n      let aValue: any;\n      let bValue: any;\n\n      switch (field) {\n        case 'name':\n          aValue = a.name;\n          bValue = b.name;\n          break;\n        case 'id':\n          aValue = a.id;\n          bValue = b.id;\n          break;\n        case 'height':\n          aValue = a.height;\n          bValue = b.height;\n          break;\n        case 'weight':\n          aValue = a.weight;\n          bValue = b.weight;\n          break;\n        case 'base_experience':\n          aValue = a.base_experience;\n          bValue = b.base_experience;\n          break;\n        default:\n          return 0;\n      }\n\n      if (order === 'asc') {\n        return aValue > bValue ? 1 : -1;\n      } else {\n        return aValue < bValue ? 1 : -1;\n      }\n    });\n  };\n\n  const filterByType = (pokemon: Pokemon[], selectedTypes: string[]): Pokemon[] => {\n    if (selectedTypes.length === 0) return pokemon;\n    \n    return pokemon.filter(p =>\n      p.types.some(type => selectedTypes.includes(type.type.name))\n    );\n  };\n\n  return {\n    pokemonList,\n    loading,\n    error,\n    types,\n    searchPokemon,\n    sortPokemon,\n    filterByType,\n    refetch: loadPokemonData,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}