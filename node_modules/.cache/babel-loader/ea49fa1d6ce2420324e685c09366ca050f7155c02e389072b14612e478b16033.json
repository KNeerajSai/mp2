{"ast":null,"code":"import axios from'axios';const BASE_URL='https://pokeapi.co/api/v2';const api=axios.create({baseURL:BASE_URL,timeout:10000});export const pokemonApi={// Get list of Pokemon with pagination\nasync getPokemonList(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:150;let offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;try{const response=await api.get(\"/pokemon?limit=\".concat(limit,\"&offset=\").concat(offset));return response.data;}catch(error){console.error('Error fetching Pokemon list:',error);throw error;}},// Get detailed Pokemon data by name or ID\nasync getPokemon(nameOrId){try{const response=await api.get(\"/pokemon/\".concat(nameOrId));return response.data;}catch(error){console.error(\"Error fetching Pokemon \".concat(nameOrId,\":\"),error);throw error;}},// Get Pokemon species data for additional info\nasync getPokemonSpecies(nameOrId){try{const response=await api.get(\"/pokemon-species/\".concat(nameOrId));return response.data;}catch(error){console.error(\"Error fetching Pokemon species \".concat(nameOrId,\":\"),error);throw error;}},// Get Pokemon by type\nasync getPokemonByType(type){try{const response=await api.get(\"/type/\".concat(type));return response.data;}catch(error){console.error(\"Error fetching Pokemon by type \".concat(type,\":\"),error);throw error;}},// Get all Pokemon types\nasync getAllTypes(){try{const response=await api.get('/type');return response.data;}catch(error){console.error('Error fetching Pokemon types:',error);throw error;}},// Extract Pokemon ID from URL\nextractIdFromUrl(url){const parts=url.split('/');return parseInt(parts[parts.length-2],10);},// Get Pokemon image URL\ngetPokemonImageUrl(id){return\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/\".concat(id,\".png\");}};export default pokemonApi;","map":{"version":3,"names":["axios","BASE_URL","api","create","baseURL","timeout","pokemonApi","getPokemonList","limit","arguments","length","undefined","offset","response","get","concat","data","error","console","getPokemon","nameOrId","getPokemonSpecies","getPokemonByType","type","getAllTypes","extractIdFromUrl","url","parts","split","parseInt","getPokemonImageUrl","id"],"sources":["/Users/deepthikondaveeti/Documents/Repos/CHI/mp2/src/services/pokemonApi.ts"],"sourcesContent":["import axios from 'axios';\nimport { Pokemon, PokemonListResponse, PokemonSpecies } from '../types/pokemon';\n\nconst BASE_URL = 'https://pokeapi.co/api/v2';\n\nconst api = axios.create({\n  baseURL: BASE_URL,\n  timeout: 10000,\n});\n\nexport const pokemonApi = {\n  // Get list of Pokemon with pagination\n  async getPokemonList(limit: number = 150, offset: number = 0): Promise<PokemonListResponse> {\n    try {\n      const response = await api.get(`/pokemon?limit=${limit}&offset=${offset}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Pokemon list:', error);\n      throw error;\n    }\n  },\n\n  // Get detailed Pokemon data by name or ID\n  async getPokemon(nameOrId: string | number): Promise<Pokemon> {\n    try {\n      const response = await api.get(`/pokemon/${nameOrId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching Pokemon ${nameOrId}:`, error);\n      throw error;\n    }\n  },\n\n  // Get Pokemon species data for additional info\n  async getPokemonSpecies(nameOrId: string | number): Promise<PokemonSpecies> {\n    try {\n      const response = await api.get(`/pokemon-species/${nameOrId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching Pokemon species ${nameOrId}:`, error);\n      throw error;\n    }\n  },\n\n  // Get Pokemon by type\n  async getPokemonByType(type: string): Promise<any> {\n    try {\n      const response = await api.get(`/type/${type}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching Pokemon by type ${type}:`, error);\n      throw error;\n    }\n  },\n\n  // Get all Pokemon types\n  async getAllTypes(): Promise<any> {\n    try {\n      const response = await api.get('/type');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Pokemon types:', error);\n      throw error;\n    }\n  },\n\n  // Extract Pokemon ID from URL\n  extractIdFromUrl(url: string): number {\n    const parts = url.split('/');\n    return parseInt(parts[parts.length - 2], 10);\n  },\n\n  // Get Pokemon image URL\n  getPokemonImageUrl(id: number): string {\n    return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;\n  },\n};\n\nexport default pokemonApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}