{"ast":null,"code":"import{useState,useEffect}from'react';import{pokemonApi}from'../services/pokemonApi';export const usePokemon=()=>{const[pokemonList,setPokemonList]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[types,setTypes]=useState([]);useEffect(()=>{loadPokemonData();loadTypes();},[]);const loadPokemonData=async()=>{try{setLoading(true);setError(null);// Get the first 150 Pokemon\nconst listResponse=await pokemonApi.getPokemonList(150,0);// Fetch detailed data for each Pokemon\nconst detailedPokemon=await Promise.all(listResponse.results.map(async pokemon=>{const id=pokemonApi.extractIdFromUrl(pokemon.url);return await pokemonApi.getPokemon(id);}));setPokemonList(detailedPokemon);}catch(err){setError('Failed to load Pokemon data');console.error('Error loading Pokemon:',err);}finally{setLoading(false);}};const loadTypes=async()=>{try{const typesResponse=await pokemonApi.getAllTypes();const typeNames=typesResponse.results.map(type=>type.name);setTypes(typeNames);}catch(err){console.error('Error loading types:',err);}};const searchPokemon=searchTerm=>{if(!searchTerm.trim())return pokemonList;return pokemonList.filter(pokemon=>pokemon.name.toLowerCase().includes(searchTerm.toLowerCase())||pokemon.id.toString().includes(searchTerm)||pokemon.types.some(type=>type.type.name.toLowerCase().includes(searchTerm.toLowerCase())));};const sortPokemon=(pokemon,field,order)=>{return[...pokemon].sort((a,b)=>{let aValue;let bValue;switch(field){case'name':aValue=a.name;bValue=b.name;break;case'id':aValue=a.id;bValue=b.id;break;case'height':aValue=a.height;bValue=b.height;break;case'weight':aValue=a.weight;bValue=b.weight;break;case'base_experience':aValue=a.base_experience;bValue=b.base_experience;break;default:return 0;}if(order==='asc'){return aValue>bValue?1:-1;}else{return aValue<bValue?1:-1;}});};const filterByType=(pokemon,selectedTypes)=>{if(selectedTypes.length===0)return pokemon;return pokemon.filter(p=>p.types.some(type=>selectedTypes.includes(type.type.name)));};return{pokemonList,loading,error,types,searchPokemon,sortPokemon,filterByType,refetch:loadPokemonData};};","map":{"version":3,"names":["useState","useEffect","pokemonApi","usePokemon","pokemonList","setPokemonList","loading","setLoading","error","setError","types","setTypes","loadPokemonData","loadTypes","listResponse","getPokemonList","detailedPokemon","Promise","all","results","map","pokemon","id","extractIdFromUrl","url","getPokemon","err","console","typesResponse","getAllTypes","typeNames","type","name","searchPokemon","searchTerm","trim","filter","toLowerCase","includes","toString","some","sortPokemon","field","order","sort","a","b","aValue","bValue","height","weight","base_experience","filterByType","selectedTypes","length","p","refetch"],"sources":["/Users/deepthikondaveeti/Documents/Repos/CHI/mp2/src/hooks/usePokemon.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Pokemon, PokemonListItem, SortField, SortOrder } from '../types/pokemon';\nimport { pokemonApi } from '../services/pokemonApi';\n\nexport const usePokemon = () => {\n  const [pokemonList, setPokemonList] = useState<Pokemon[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [types, setTypes] = useState<string[]>([]);\n\n  useEffect(() => {\n    loadPokemonData();\n    loadTypes();\n  }, []);\n\n  const loadPokemonData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Get the first 150 Pokemon\n      const listResponse = await pokemonApi.getPokemonList(150, 0);\n      \n      // Fetch detailed data for each Pokemon\n      const detailedPokemon = await Promise.all(\n        listResponse.results.map(async (pokemon: PokemonListItem) => {\n          const id = pokemonApi.extractIdFromUrl(pokemon.url);\n          return await pokemonApi.getPokemon(id);\n        })\n      );\n\n      setPokemonList(detailedPokemon);\n    } catch (err) {\n      setError('Failed to load Pokemon data');\n      console.error('Error loading Pokemon:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadTypes = async () => {\n    try {\n      const typesResponse = await pokemonApi.getAllTypes();\n      const typeNames = typesResponse.results.map((type: any) => type.name);\n      setTypes(typeNames);\n    } catch (err) {\n      console.error('Error loading types:', err);\n    }\n  };\n\n  const searchPokemon = (searchTerm: string): Pokemon[] => {\n    if (!searchTerm.trim()) return pokemonList;\n    \n    return pokemonList.filter(pokemon =>\n      pokemon.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      pokemon.id.toString().includes(searchTerm) ||\n      pokemon.types.some(type => \n        type.type.name.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    );\n  };\n\n  const sortPokemon = (pokemon: Pokemon[], field: SortField, order: SortOrder): Pokemon[] => {\n    return [...pokemon].sort((a, b) => {\n      let aValue: any;\n      let bValue: any;\n\n      switch (field) {\n        case 'name':\n          aValue = a.name;\n          bValue = b.name;\n          break;\n        case 'id':\n          aValue = a.id;\n          bValue = b.id;\n          break;\n        case 'height':\n          aValue = a.height;\n          bValue = b.height;\n          break;\n        case 'weight':\n          aValue = a.weight;\n          bValue = b.weight;\n          break;\n        case 'base_experience':\n          aValue = a.base_experience;\n          bValue = b.base_experience;\n          break;\n        default:\n          return 0;\n      }\n\n      if (order === 'asc') {\n        return aValue > bValue ? 1 : -1;\n      } else {\n        return aValue < bValue ? 1 : -1;\n      }\n    });\n  };\n\n  const filterByType = (pokemon: Pokemon[], selectedTypes: string[]): Pokemon[] => {\n    if (selectedTypes.length === 0) return pokemon;\n    \n    return pokemon.filter(p =>\n      p.types.some(type => selectedTypes.includes(type.type.name))\n    );\n  };\n\n  return {\n    pokemonList,\n    loading,\n    error,\n    types,\n    searchPokemon,\n    sortPokemon,\n    filterByType,\n    refetch: loadPokemonData,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}